#!/usr/bin/env python3

import durgesh_ai
#from durgesh_ai import Model, KaldiRecognizer, SetLogLevel
import argparse
import os
import queue
import sounddevice as sd
import sys
import json
from pydub import AudioSegment
from pydub.playback import play
import numpy as np
import faulthandler; faulthandler.enable()
import nltk
from nltk.chat.util import Chat, reflections
import hashlib
import subprocess
import random

q = queue.Queue()

durgesh_ai.SetLogLevel(-1)

durgesh_sig = [[-0.270850, -0.212551, 0.927679, -0.039682, -1.315859, 0.122615, -0.161703, 1.261226, 0.688532, 0.561987, -0.905016, -0.334678, -1.876464, 0.290378, -0.360332, 0.143806, 2.344308, 0.173161, 0.461200, -0.018955, 0.784562, -1.973638, 0.820198, 0.971506, 0.199553, -0.044888, 0.782270, 0.562169, 0.441080, -1.349802, -0.079409, -0.924545, 0.159457, 0.117322, 0.241523, 0.840836, 1.626028, 1.171419, -0.269497, -1.981296, -0.773380, 1.513160, 0.041558, 0.243750, 0.672850, -3.349714, -0.859326, -1.014004, -0.154446, 0.170255, -0.864794, -0.745835, -1.912406, -0.654366, -0.682787, 0.102979, -1.565196, -0.971065, -0.719860, 1.012983, -0.046397, 1.164764, 0.011567, 0.932435, 0.317087, -0.346704, -0.194954, 0.623986, 1.274495, -0.752952, 0.755442, 0.243288, 2.535361, 1.103773, -0.480219, 0.167541, 0.317299, 0.543319, 1.076182, 1.148338, 0.222986, 0.714785, 1.699674, -2.500171, 0.362855, 0.339105, -0.539366, 0.976873, 1.110307, -1.000461, 1.011344, -0.767314, -1.146217, 1.114186, 0.289546, 0.286980, -0.489067, -1.544870, -0.872457, 0.990619, -0.677437, 0.317355, 0.887845, 0.497649, -0.777493, -1.120255, 0.443041, -0.057492, 0.476226, 1.707790, 1.758018, -0.375465, -0.645467, 1.110621, -2.103074, 0.913102, -0.226334, -1.893271, 0.703810, -0.953227, -0.164411, -0.071630, 0.132141, 1.718498, 0.320412, -0.007896, -0.986679, 1.320384],
[-0.023946, -0.288124, 1.449579, 0.791046, -1.209305, 0.204397, 0.023990, -0.718877, 1.180871, 0.452670, -0.710573, -0.629353, -0.300950, -0.550897, -0.744161, 0.500262, 2.155340, 0.564684, -0.242390, -0.149966, 1.606435, -2.042233, 0.621469, 1.329729, -0.413598, 0.837140, 2.007400, 0.100697, 1.360805, 0.213724, -0.907976, -0.847295, 0.482831, 0.053084, -0.040086, 0.593668, -0.007005, -0.093073, -0.667643, -1.179676, 0.010387, 2.254497, 0.442901, -0.967775, -2.006449, -1.996931, -1.542139, -1.839039, -0.785832, 0.213184, -1.371683, -0.292686, -1.629605, 0.688128, -0.487598, 0.439987, -0.633442, 0.665857, 0.750174, -0.884817, 0.884208, 0.265049, -0.875375, 0.312353, 0.930325, 0.623135, -0.669811, -0.014829, 1.356412, -1.358169, -0.074259, -0.825605, 2.006318, 1.409351, 1.177902, -0.440138, 0.685504, 0.423923, 1.564744, -0.091696, 0.007328, -0.422597, 0.877448, -0.958550, 0.820045, -0.505623, -0.221675, -0.035146, -0.633057, -0.744751, 0.436836, -0.891862, -1.444142, 0.026619, 1.004279, -0.009845, 0.289187, -1.826542, -0.709694, 1.682518, -0.316116, 0.337827, 0.884041, 0.992359, -0.757098, -1.135440, 0.809878, 0.876761, -0.279866, 2.146756, 1.929095, -1.290426, -0.833750, 0.601878, -2.089350, 0.167301, 0.637203, 0.215978, 1.616973, 1.827668, -0.088197, -1.081681, 1.434782, 1.310269, 0.226171, -0.074801, -0.922278, 0.417110],
[-0.573561, -0.449935, 1.325293, -0.116435, -0.862859, 0.662770, 0.328424, 0.330065, 1.387977, 0.258571, -1.559621, 0.235052, -1.479264, 0.096002, -0.461782, -0.382590, 2.436489, -0.045871, 0.176743, 0.273349, 1.278756, -2.549181, 1.505594, 1.637871, 0.115779, 0.542311, 1.583385, -0.198190, 0.770395, 0.753647, 0.374309, -0.138815, 0.538656, -0.400717, 0.754103, 0.581915, 1.229201, 0.943665, -1.548596, -2.070564, -0.489275, 1.933114, 0.783279, -1.465453, -0.501926, -1.747647, -0.368650, -0.863173, 0.083724, -0.269802, -1.051293, 0.124540, -1.511136, -0.609616, -0.453493, 0.130730, -0.399856, 1.395710, 0.194395, 0.010162, 0.482874, 1.633608, 0.053961, 0.415120, -0.215442, 0.130897, -0.478566, 0.130671, 1.367955, 0.339752, 0.869446, 0.621715, 1.311334, 0.565517, -1.265907, 0.963976, 0.168732, 0.440510, 1.810944, 0.534582, -0.249660, 0.604445, 1.794236, -1.113767, 0.961786, 0.695250, 0.692917, 0.499476, 1.230303, -1.861071, 0.645854, -1.420861, -1.634614, 0.470622, 1.084211, 0.087916, 0.857910, 0.348068, -1.657484, 1.053448, -0.865956, 0.435609, 1.601212, 0.228425, -0.426141, -1.569926, 0.318266, 0.330024, -0.151965, 0.242231, 1.620771, -0.401043, 0.570996, 0.928841, -1.427782, 0.254112, -0.310513, 0.373907, 1.455321, -1.546634, 0.131015, -1.588301, 1.097084, -0.079250, 1.581898, 0.615962, -1.467691, 1.467679]]

gargi_sig = [[1.085790, 2.902240, -0.577076, -0.867309, 1.050133, 0.978351, 0.150286, -0.136957, 0.816583, 1.560487, 1.241626, 0.105022, 0.121307, -1.908773, -0.244200, -0.325008, 0.267871, 2.136928, -0.131802, 2.034021, -0.639585, -1.201441, 0.421627, -1.259343, 0.729506, 1.712931, -0.123507, 0.883316, 0.144603, -0.008094, 0.379608, -0.032678, -0.451335, -1.639524, 0.895078, 0.011484, -1.861152, 0.689844, -1.200083, 0.830991, -0.941820, -0.179324, 1.892356, -2.078195, 1.154611, 1.406932, 1.144449, 0.580276, -1.885353, 0.058390, -0.026283, 0.432209, -1.427397, -1.913549, 0.114461, 0.869686, -0.489242, -0.021167, -0.038652, -1.087729, 1.033306, 1.008217, -1.278882, 0.784983, 0.751588, 0.158860, -0.295607, -0.400611, 0.794638, 0.746633, -0.245027, 0.494277, 1.602966, 0.059667, -1.166284, 0.245687, 1.976785, 0.386704, -1.034626, 1.474965, -0.180622, 1.427746, 0.521358, -0.155879, 1.197877, 0.769062, -0.954391, -1.726482, 0.330010, 0.365607, 0.885721, -1.512598, -1.536402, 0.858545, 0.767815, -1.292166, -0.921062, 0.491512, -0.503857, -0.068735, -1.320119, 0.006353, 0.132436, 0.646239, 0.127364, -1.080691, 0.709779, -0.397821, -0.100628, 0.265477, -1.136315, 0.409572, 0.908899, 1.923296, -1.422960, -0.367095, -0.839299, 0.778631, -1.438106, 1.350643, 0.473973, 0.427118, 0.169009, 0.581409, 0.459225, 0.074333, -0.071419, 0.000048],
[0.631381, 2.060230, -0.285374, -0.257522, 1.214869, 0.841440, 0.132161, 0.079095, 0.219989, 0.799767, 0.550381, 0.360086, -0.258486, -1.776827, -0.562717, -0.057660, -0.310698, 1.624670, -0.597421, 1.087961, -0.219993, -0.760687, 0.648265, -2.111295, 1.095418, 2.218982, 0.195930, 0.066323, -0.507579, 0.313654, -0.418767, -0.813088, 0.290826, -1.191252, 1.096182, 0.926051, -1.213641, 0.834834, -0.421435, -0.281962, 0.631314, -0.124837, 1.905064, -2.654172, 0.760614, 1.700669, 1.257183, 0.048596, -1.109297, 0.231454, -0.436245, 1.606121, -1.982764, -1.025968, 0.681341, 0.735683, -0.281220, 0.904309, 0.021083, 0.422353, 1.130959, 0.287384, -0.985839, 0.420290, 1.532854, 0.326034, -0.897479, -0.520632, 1.455153, 1.930178, -0.757847, 0.741161, 1.824571, -0.865627, -1.445182, -0.366391, 1.220113, -1.301066, 0.170602, 2.053032, -0.222997, 0.642896, 0.016174, 0.516256, 1.646149, -1.263504, -1.687540, -1.647389, -0.100816, 0.683754, 0.099392, -0.799665, -0.598120, 1.809976, 0.708163, 0.635407, -1.232731, -0.276023, 0.344206, -1.194966, -1.346332, -1.020808, -0.806138, 0.465088, 0.695125, -0.011471, 1.621457, 0.818795, -0.017836, 1.274370, -1.496656, 0.355318, -0.144586, -0.644359, 0.374052, -0.055556, 0.351651, 0.832570, 1.038373, -1.137402, 1.203720, -0.192764, -0.806367, 0.898489, 0.577418, 0.835027, 0.569906, 0.492347],
[0.595776, 3.064636, -0.223051, -0.418745, 0.367751, 0.337108, 0.582713, 0.231341, 0.576899, 0.756774, 1.047044, 0.030526, -0.195239, -1.145410, 0.072751, 0.070652, 0.492776, 1.457918, 1.042892, 0.901446, 0.542436, -0.053635, 0.295302, -1.742727, 2.043322, 0.985076, 0.112886, -0.445816, 0.597116, -0.395057, 0.707992, -0.670095, 1.012647, -1.489468, 1.008782, 0.450504, -1.253410, 1.199473, -0.402981, 0.323042, 1.075894, -0.611532, 1.348981, -2.830941, 1.724760, 2.273920, 1.129145, -0.009064, -2.665408, 0.643679, 0.099497, -0.485294, -1.045146, -0.774983, 0.785244, -0.369350, -0.737941, 0.711113, -0.413707, -0.274892, 0.385279, 0.039717, -0.832191, 1.899801, 1.803057, 0.894108, 0.572058, -1.057546, 0.650599, -0.058663, -1.570758, -0.227873, 1.233336, -0.077843, -0.990096, -0.050148, 2.080832, 0.310646, -0.189886, 1.198765, -0.489270, 0.195529, -0.177914, -0.433992, 1.744467, 0.514592, -1.152544, -0.808172, 0.253188, 0.714287, 1.168469, -1.621246, -0.288220, -0.607521, 0.394574, 0.705779, -1.584878, -0.200209, -0.241729, 0.362601, -1.711098, -0.679096, -0.005998, 0.214252, 1.059889, -1.366713, 1.407235, -1.298355, -0.230284, -0.131677, -2.256413, -1.083293, -0.481203, 0.790109, -1.012797, -0.018388, 0.404192, -0.689927, 0.365732, 0.069893, 1.332981, -0.253055, 0.277752, 0.438637, 0.927167, 0.960190, 0.716182, 0.692871]]

rules = []

valid_hash = []

with open("out_hash.csv","r") as f1:
        for line in f1:
                ls = line.strip().split("\t")
                valid_hash.append(ls[0])
                tmp_ = []
                tmp_.append(r""+ls[1]+"")
                tmp__ = []
                for x in ls[2:]:
                        tmp__.append(x)
                tmp_.append(tmp__)
                rules.append(tmp_)

def chat(inp):
    result = hashlib.sha1(inp.encode()).hexdigest()
    if result in  valid_hash:
        chat = Chat(rules, reflections)
        res = chat.respond(inp)
        play_response(result,hashlib.sha1(res.encode()).hexdigest())
    else:
        au_ = "audio/unk/"+str(random.randint(1,4))+".mp3"
        cmd = "lame --decode "+au_+" - | play -"
        ps = subprocess.Popen(('lame', '--decode',au_,'-'), stdout=subprocess.PIPE)
        output = subprocess.check_output(('play', '-'), stdin=ps.stdout)
        ps.wait()

def play_response(que_hash,ans_hash):
    au_ = "audio/"+que_hash+"/"+ans_hash+".mp3"
    cmd = "lame --decode "+au_+" - | play -"
    ps = subprocess.Popen(('lame', '--decode',au_,'-'), stdout=subprocess.PIPE)
    output = subprocess.check_output(('play', '-'), stdin=ps.stdout)
    ps.wait()

def cosine_dist(x, y):
    nx = np.array(x)
    ny = np.array(y)
    return 1 - np.dot(nx, ny) / np.linalg.norm(nx) / np.linalg.norm(ny)

def int_or_str(text):
    """Helper function for argument parsing."""
    try:
        return int(text)
    except ValueError:
        return text

def callback(indata, frames, time, status):
    """This is called (from a separate thread) for each audio block."""
    if status:
        print(status, file=sys.stderr)
    q.put(bytes(indata))

def start_asr_recognizer(rec):
    while True:
        data = q.get()
        if rec.AcceptWaveform(data):
            print(rec.Result())
            break
        else:
            print(rec.PartialResult())

try:
    model = durgesh_ai.Model("model",False)
    spk_model = durgesh_ai.SpkModel("model-spk")
    asr_model = durgesh_ai.Model("model",True)
    # wake_model = vosk.Model(args.model)
    dump_fn = None

    with sd.RawInputStream(samplerate=16000, blocksize = 8000, device=None, dtype='int16',
                            channels=1, callback=callback):
            print('#' * 80)
            print('Press Ctrl+C to stop the recording')
            print('#' * 80)
            unk_word = "[unk]"
            wake_word = ["hey","max"]
            template = "["
            nw = len(wake_word)
            count = 1
            for sw in wake_word:
                template = template + "\""+sw+"\""
                if count < nw:
                    template = template + ","
                count += 1
            # print("template : ",template)
            template = template +","+"\""+unk_word+"\"]"
            # print("template : ",template)
            # sys.exit(0)
            wake_rec = durgesh_ai.KaldiRecognizer(model,spk_model,16000,template)
            asr_rec = durgesh_ai.KaldiRecognizer(asr_model,16000)
            # print("test")
            is_word_available = wake_rec.CheckWakeAvailability(template)
            print("asr_model.GetAsrLoadStatus() : ",asr_model.GetAsrLoadStatus())
            print("model.GetKwsLoadStatus() : ",model.GetKwsLoadStatus())
            # is_word_available = durgesh_ai.Model(args.model).FindWord("eva")
            # print("is_word_available : ",is_word_available)
            spk_thresh = 0.6
            # rec = durgesh_ai.KaldiRecognizer(model, args.samplerate)
            is_kws = False
            if is_word_available:
                while True:
                    data = q.get()
                    if is_kws:
                        # print("passing..")
                        if asr_rec.AcceptWaveform(data,True):
                            res = json.loads(asr_rec.Result())["text"]
                            chat(res)
                            print("====> ",res,end='\r')
                            is_kws = False
                            print('')
                            print("listening...")
                        else:
                            print("====> ",json.loads(asr_rec.PartialResult())["partial"],end='\r')
                        sys.stdout.flush()
                    else:
                        wake_rec.AcceptWaveform(data,False)
                        partial_res = wake_rec.KwsResult()
                        if json.loads(partial_res)["text"] != "":
                            print(partial_res)
                            is_kws = True
                            if 'spk' in json.loads(partial_res):
                                avg1 = 0
                                for x in durgesh_sig:
                                    dist = cosine_dist(x, json.loads(partial_res)['spk'])
                                    print("d Match : ",dist)
                                    avg1 = avg1 + float(dist)
                                avg1 = avg1/len(durgesh_sig)
                                avg2 = 0
                                for x in gargi_sig:
                                    dist = cosine_dist(x, json.loads(partial_res)['spk'])
                                    print("g Match : ",dist)
                                    avg2 = avg2 + float(dist)
                                avg2 = avg2/len(gargi_sig)
                                if avg1 < avg2 and avg1 <= spk_thresh:
                                    print("Its Durgesh : ",avg1)
                                elif avg2 < avg1 and avg2 <= spk_thresh:
                                    print("Its Gargi : ",avg2)
                                else:
                                    print("Unable to identify speaker : ",avg1,avg2)
                        # play(AudioSegment.from_wav("ding.wav"))
            else:
                print("wake word not exists")
                # if rec.AcceptWaveform(data):
                #     print(rec.Result())
                # else:
                #     print(rec.PartialResult())
                # if dump_fn is not None:
                #     dump_fn.write(data)

#except KeyboardInterrupt:
#    print('\nDone')
#    parser.exit(0)
except Exception as e:
    parser.exit(type(e).__name__ + ': ' + str(e))
